{"version":3,"file":"index.min.js","sources":["index.js"],"sourcesContent":["/*\n * s-is version 1.4.15 at 2020-09-25\n * @license MIT License Copyright (c) 2016 Serhii Perekhrest <allsajera@gmail.com> ( Sajera )    \n */\n/** @ignore */\n(function () {'use strict';\n\nvar ts = Object.prototype.toString;\n/*-------------------------------------------------\n    10 data types\n---------------------------------------------------*/\nvar types = {\n    /**\n     * @description\n        typeof return name of the data type\n        it can return all 10 data types plus new data types of ES6.\n     * @example\n        is.typeof([]);      // => 'array'\n        is('typeof', []);   // => 'array'\n     * @param { any } data\n     * @returns { String }\n     * @function is.typeof\n     * @public\n     */\n    'typeof': function ( data ) {\n        for ( var key in types ) if ( key != 'typeof' && types[key]( data ) ) break;\n        // unknown data type => with a huge proportion of the probability is an object (from specific native classes)\n        if ( key == 'defined' ) return typeof data;\n        else return key;\n    },\n    /**\n     * @description It determine only NaN\n     * @example\n        is.nan(NaN);        // => true\n        is('NaN', NaN);     // => true\n        is('NaN', 'NaN');   // => false\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is.nan\n     * @public\n     */\n    'nan': function ( data ) { return data !== data; },\n    /**\n     * @description It determine only infinity's\n     * @example\n        is.infinity(-Infinity);                     // => true\n        is('Infinity', Infinity);                   // => true\n        is('Infinity', 9999999*9999999*9999999);    // => true\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is.infinity\n     * @public\n     */\n    'infinity': function ( data ) { return is.number( data ) && data == data+1; },\n    /**\n     * @description It determine only null\n     * @example\n        is.null(null);      // => true\n        is('null', null);   // => true\n        // otherwise false\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is.null\n     * @public\n     */\n    'null': function ( data ) { return data === null; },\n    /**\n     * @description It determine only numbers (like a native typeof)\n     * @see {@link is.finity} more specific determine\n     * @see {@link is._number} more specific determine\n     * @see {@link is.countable} less specific determine\n     * @example\n        is.number(1);         // => true\n        is.number(NaN);       // => true\n        is('number', null);   // => false\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is.number\n     * @public\n     */\n    'number': function ( data ) { return typeof data == 'number'; },\n    /**\n     * @description It determine only strings\n     * @example\n        is.string('');          // => true\n        is('string', 'null');   // => true\n        is('string', []);       // => false\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is.string\n     * @public\n     */\n    'string': function ( data ) { return typeof data == 'string'; },\n    /**\n     * @description It determine only booleans\n     * @example\n        is.boolean(true);          // => true\n        is('boolean', false);      // => true\n        // otherwise false\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is.boolean\n     * @public\n     */\n    'boolean': function ( data ) { return typeof data == 'boolean'; },\n    /**\n     * @description It determine only functions\n     * @example\n        is.function(Function);      // => true\n        is('function', Function);   // => true\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is.function\n     * @public\n     */\n    'function': function ( data ) { return typeof data == 'function'; },\n    /**\n     * @description It determine only array\n     * @example\n        is.array([]);           // => true\n        is('array', [1,2]);     // => true\n        is('array', '1,2');     // => false\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is.array\n     * @public\n     */\n    'array': function ( data ) { return ts.call(data) == '[object Array]'; },\n    /**\n     * @description It determine only objects. Except null and array\n     * @example\n        is.object({});          // => true\n        is('object', {x:1});    // => true\n        is('object', []);       // => false\n        is('object', null);     // => false\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is.object\n     * @public\n     */\n    'object': function ( data ) { return !!data && !is.array( data ) && typeof data == 'object'; },\n    /**\n     * @description It determine only undefined\n     * @see {@link is._object} more specific determine\n     * @example\n        is.undefined(undefined);    // => true\n        is('undefined', void(0));   // => true\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is.undefined\n     * @public\n     */\n    'undefined': function ( data ) { return typeof data == 'undefined'; },\n    /*-------------------------------------------------\n        I believe that this method refers to a strict mode of data type definitions\n        but typeof is really need it\n    ---------------------------------------------------*/\n    /**\n     * @description always success except undefined\n     * @example\n        is.defined(null);       // => true\n        is('defined', 0);       // => true\n        is('defined', void(0)); // => false\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is.defined\n     * @public\n     */\n    'defined': function ( data ) { return typeof data != 'undefined'; },\n    /*\n     * which additional data types requires detect ?\n     * @returns: { Boolean }\n     */\n};\n\n\n/*-------------------------------------------------\n    strict mode for checking data types\n---------------------------------------------------*/\nvar strict = {\n    /**\n     * @description It determine only objects of customers (developers)\n     * @see {@link is.object} less specific determine\n     * @example\n        is._object({});                     // => true\n        is('_object', {x:1});               // => true\n        is('_object', new (class q {}));    // => true\n        is('_object', null);                // => false\n        is('_object', new Date);            // => false\n        is('_object', new Error);           // => false\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is._object\n     * @public\n     */\n    '_object': function ( data ) { return ts.call(data) == '[object Object]'; },\n    /**\n     * @description strictly determine of numbers. Not NaN or Infinity or NUMBER more than possible to consider\n     * @see {@link is.finity} alias\n     * @see {@link is.number} less specific determine\n     * @see {@link is.countable} less specific determine\n     * @example\n        is._number(1);         // => true\n        is._number(NaN);       // => false\n        is('_number', null);   // => false\n        is('_number', 9999999*9999999*9999999);   // => false\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is._number\n     * @public\n     */\n    '_number': function ( data ) { return is.number( data ) && !is.nan( data ) && data != data+1; },\n    /**\n     * @description It determine classes.\n     * @example\n        class q {}\n        class q1 extends q {}\n        function Class (){}\n        is.class( Class );      // => false\n        is.class( q );          // => true\n        is('Class', q1 );       // => true\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is.class\n     * @public\n     */\n    'class': function ( data ) { return is.function( data ) && /^class/.test(data.toString()); },\n    /**\n     * @description\n        strict comparison to equivalent between arguments\n\n        \\* circular structure cannot be equaled. It returns false\n\n     * @see {@link is.equal} less specific determine\n     * @example\n        is('_equal', [1,{x:2}],[1,{x:1}]);  // => false\n        is('_equal', [1,{x: Function}],[1,{x:function(){}}]);// => false\n        is('_equal', [1,{x:'1'}],[1,{x:1}]);// => false\n        is('_equal', [1,{x:1}],[1,{x:1}]);  // => true\n        is._equal();                        // => true becose (undefined, undefined)\n        is._equal(NaN, NaN);                // => true\n     * @param { any } first\n     * @param { any } second\n     * @returns { Boolean }\n     * @function is._equal\n     * @public\n     */\n    '_equal': function ( first, second ) {\n        switch ( is.typeof(first) ) {\n            case 'nan': return is.nan(second);\n            case 'infinity':\n            case 'undefined':\n            case 'boolean':\n            case 'symbol':\n            case 'null': return first == second;\n            case 'number': return is.number(second)&&first == second;\n            case 'string': return is.string(second)&&first == second;\n            case 'function': return is.function(second)&&first.toString() == second.toString();\n            case 'array':\n            case 'object':\n                var st = is.typeof(second);\n                if (st=='array'||st=='object') {\n                    return _objEqual( first, second );\n                } else return false;\n        }\n        // expect its case is error\n        return false;\n    },\n    /*\n     * which data types requires a strict detect ?\n     * @returns: { Boolean }\n     */\n};\n/**\n * @description copmpare objects in strict mode\n * @param { Object }\n * @returns { Object }\n * @function\n * @private\n * @ignore\n */\nfunction _objEqual ( first, second ) {\n    var k1 = Object.keys(first);\n    var k2 = Object.keys(second)\n    // fast compare\n    if ( k1.length != k2.length )return false;\n    else {\n        try { if( JSON.stringify(first) != JSON.stringify(second) ) return false;\n        } catch (e) { return false; } // circular structure cannot be equaled\n        for ( var key = 0; key < k1.length; key ++ ) // check functions\n            if ( k2.indexOf(k1[key]) == -1 || !strict._equal(first[k1[key]], second[k1[key]]) ) return false;\n    }\n    // i can not find any differents\n    return true;\n}\n\n\n/*-------------------------------------------------\n    some helpers to detect some things\n---------------------------------------------------*/\nvar helpers = {\n    /**\n     * @description\n        comparison to equivalent between arguments\n        ignores difference in functions\n        ignores data types difference if it equivalent (1,'1')\n\n        \\* circular structure cannot be equaled. It returns false\n     * @see {@link is._equal} more specific determine\n     * @example\n        is('equal', [1,{x:2}],[1,{x:1}]);  // => false\n        is('equal', [1,{x:'1'}],[1,{x:1}]);// => true\n        is('equal', [1,{x:1}],[1,{x:1}]);  // => true\n        is.equal();                        // => true becose (undefined, undefined)\n        is.equal(NaN, NaN);                // => true\n        is('equal', [1,{x: Function}],[1,{x:function(){}}]);// => true\n     * @param { any } first\n     * @param { any } second\n     * @returns { Boolean }\n     * @function is.equal\n     * @public\n     */\n    'equal': function ( first, second ) {\n        switch ( is.typeof(first) ) {\n            case 'nan': return is.nan(second);\n            case 'infinity':\n            case 'undefined':\n            case 'boolean':\n            case 'null': return first == second;\n            case 'function': return is.function(second);\n            case 'symbol':\n            case 'number':\n            case 'string':\n                var st = is.typeof(second);\n                if (st!='null'&&st!='undefined') {\n                    return first.toString() == second.toString();\n                } else return false;\n            case 'array':\n            case 'object':\n                var st = is.typeof(second);\n                if (st=='array'||st=='object') {\n                    return objEqual(first, second);\n                } else return false;\n        }\n        // expect its case is error\n        return false;\n    },\n    /**\n     * @description\n        check the data that may contain child elements. Otherwise returns false.\n\n        \\* can work not safe and throws an error when data is incorrect.\n     * @see {@link https://docs.omniref.com/js/npm/lodash/0.9.0/symbols/%3Canonymous%3E~hasDontEnumBug} without fix\n     * @example\n        is.empty([]);        // true\n        is('empty', '');     // true\n        is('empty', {});     // true\n        is.empty([1]);       // false\n        is('empty', '[]');   // false\n     * @param { any } data\n     * @param { Boolean } [notSafe=false] - without \"notSafe\" can check any data type\n     * @returns { Boolean }\n     * @function is.empty\n     * @public\n     */\n    'empty': function ( data, notSafe ) {\n        // if datatype acceptable to Object.keys\n        if ( data&&(typeof data == 'object'||is.string(data)||is.function(data) ) ) {\n            for ( var prop in data )\n                if ( Object.prototype.hasOwnProperty.call(data, prop) ) return false;\n            return true;\n        // or maybe it's must be an error ?\n        } else if ( notSafe ) throw new Error('A you sure ? - '+is.typeof(data).toUpperCase()+' may contain child elements ?');\n        // or maybe it's must be \"true\" ?\n        else return true;\n    },\n    /**\n     * @description It determine only numbers of possible to consider\n     * @see {@link is._number} alias\n     * @see {@link is.number} less specific determine\n     * @see {@link is.countable} less specific determine\n     * @example\n        is.finite(1);         // => true\n        is.finite(NaN);       // => false\n        is('finite', null);   // => false\n        is('finite', 9999999*9999999*9999999);   // => false\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is.finite\n     * @public\n     */\n    'finite': function ( data ) { return is._number(data); },\n    /**\n     * @description It determine value can be involved in mathematical operations\n     * @see {@link is._number} more specific determine\n     * @see {@link is.number} more specific determine\n     * @see {@link is.finite} more specific determine\n     * @example\n        is.countable(1);         // => true\n        is.countable('1');       // => true\n        is.countable(true);      // => true\n        is.countable(NaN);       // => false\n        is('countable', null);   // => false\n        is('countable', 9999999*9999999*9999999);   // => false\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is.countable\n     * @public\n     */\n    'countable': function ( data ) {\n        return !is.symbol( data ) && !is.infinity( data ) && !is.array( data ) && data*1 == data;\n    },\n    /*-------------------------------------------------\n        addition js data detection\n    ---------------------------------------------------*/\n    /**\n     * @description It determine object of native Date ( some things like (new Date()) instanceof Date )\n     * @example\n        is.date(new Date);      // => true\n        is('date', new Date);   // => true\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is.date\n     * @public\n     */\n    'date': function ( data ) { return ts.call(data) == '[object Date]'; },\n    /**\n     * @description It determine object of error\n     * @example\n        is.error(new Error);        // => true\n        is('error', new TypeError); // => true\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is.error\n     * @public\n     */\n    'error': function ( data ) { return ts.call(data) == '[object Error]'; },\n    /**\n     * @description It determine RegExp.\n     * @example\n        is.regexp(new RegExp);  // => true\n        is('RegExp', /1/g);     // => true\n        is('regexp', '/1/g');   // => false because it isn't RegExp\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is.regexp\n     * @public\n     */\n    'regexp': function ( data ) { return ts.call(data) == '[object RegExp]'; },\n    /**\n     * @description It determine object arguments.\n     * @example\n        var args; // get object arguments\n        (function(){ args = arguments; })();\n        is.argument(args);          // => true\n        is('argument', args);       // => true\n        is('argument', []);         // => false\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is.argument\n     * @public\n     */\n    'argument': function ( data ) { return ts.call(data) == '[object Arguments]'; },\n    /**\n     * @description It determine instance Symbol. (safety for es5)\n     * @example\n        is.symbol(Symbol());     // => true\n        is('symbol', Symbol());  // => true\n     * @param { any } data\n     * @returns { Boolean }\n     * @function is.symbol\n     * @public\n     */\n    'symbol': function ( data ) { return ts.call(data) == '[object Symbol]'; },\n    /**\n     * @description It determine instance Promise.\n     * @example\n        is.promise(new Promise(function(){}));  // => true\n        is('promise', q.defer().promise);       // => true\n        is('promise', {then: function(){}});    // => true\n     * @name is.promise\n     * @param { any } data\n     * @returns { Boolean }\n     * @function\n     * @public\n     */\n    'promise': function ( data ) { return ts.call(data) == '[object Promise]'||(!!data && is.function(data['then'])); },\n    /*\n     * which additional data types requires detect ?\n     * @returns: { Boolean }\n     */\n};\n/**\n * @description copmpare objects in non strict mode\n * @param { Object }\n * @returns { Object }\n * @function\n * @private\n * @ignore\n */\nfunction objEqual ( first, second ) {\n    var k1 = Object.keys(first);\n    var k2 = Object.keys(second)\n    // fast compare\n    if ( k1.length != k2.length ) return false;\n    else { // check on circular links\n        try { JSON.stringify(first)&&JSON.stringify(second)\n        } catch (e) { return false; } // circular structure cannot be equaled\n        for ( var key = 0; key < k1.length; key ++ )\n            if ( k2.indexOf(k1[key]) == -1 || !helpers.equal(first[k1[key]], second[k1[key]]) ) return false;\n    }\n    // i can not find any differents\n    return true;\n}\n\n\n/*-------------------------------------------------\n    detect a supported of platforms\n    sometimes we want to know whether this is supported technology for this platform\n---------------------------------------------------*/\nvar support = {\n    /**\n     * @description It determine platform support for Symbol (save)\n     * @example\n        is('support', 'symbol');\n        is.support('symbol');\n        is.support.symbol();\n     * @returns { Boolean }\n     * @function is.support.symbol\n     * @public\n     */\n    'symbol': function () { return typeof Symbol == 'function' && is.symbol(Symbol()); },\n    /**\n     * @description It determine platform support for Promise (save)\n     * @example\n        is('support', 'promise');\n        is.support('promise');\n        is.support.promise();\n     * @returns { Boolean }\n     * @function is.support.promise\n     * @public\n     */\n    'promise': function () { return typeof Promise == 'function' && is.promise(new Promise(new Function)); },\n    /*\n     * which support we may need detect ?\n     * @returns: { Boolean }\n     */\n};\n\n\n/*-------------------------------------------------\n    detect a platforms (my plan make a more platform detection)\n---------------------------------------------------*/\nvar platform = {\n    /**\n     * @description It determine platform Node.js (save)\n     * @example\n        is('platform', 'node'); // => true\n        is.platform('node');    // => true\n        is.platform.node();     // => true\n     * @returns { Boolean }\n     * @function is.platform.node\n     * @public\n     */\n    'node': function () { return typeof process != 'undefined' && ts.call(process) == '[object process]'; },\n    /**\n     * @description It determine platform browser (save)\n     * @example\n        is('platform', 'browser'); // => true\n        is.platform('browser');    // => true\n        is.platform.browser();     // => true\n     * @returns { Boolean }\n     * @function is.platform.browser\n     * @public\n     */\n    'browser': function () { return typeof window != 'undefined' && ts.call(window) == '[object Window]'; },\n    /*\n     * which platform we may need detect ?\n     * @returns: { Boolean }\n     */\n};\n\n\n/**\n * @description replace Object.assign\n * @param { Object } any count\n * @returns { Object }\n * @function extend\n * @private\n */\nfunction extend () {\n    var result = arguments[0], key = 1, field;\n    for ( ; key < arguments.length; key ++ ) {\n        for ( field in arguments[key] ) {\n            result[field] = arguments[key][field];\n        }\n    }\n    return result;\n}\n\n/**\n * @description\n    create bound function\n    with object in context and the same object in properties of bound function\n * @example\n        1. is.function(new Function);   // => true\n        2. is('function',new Function); // => true\n * @param { Object } checks - map of methods\n * @returns { Function }\n * @function\n * @private\n */\nfunction dualize ( checks ) {\n    return extend(is.bind(checks), checks);\n}\n/**\n * @description\n    executor of checks to delegate a data for checking\n    have a ability use upper case when string annotation name checks used\n * @example\n    // the same\n    is('platform', 'browser');\n    is.platform('browser');\n    is.platform.browser();\n * @param { String } check - it can be name of branch/check\n * @param { any } - it can be name of branch/check\n * @returns { Boolean }\n * @function\n * @public\n */\nfunction is ( check ) {\n    if (\n        typeof check.toLowerCase == 'function'\n        && (check = check.toLowerCase())\n        && typeof this[check] == 'function'\n    ) return this[check].apply(null, Array.prototype.slice.call(arguments, 1));\n    else throw new Error('No such check as \"'+check+'\"');\n}\n/*-------------------------------------------------\n    build a user frendly =) executer for cheks\n    easier to understand if seen as a map of the methods\n---------------------------------------------------*/\nvar is = dualize(extend(\n    {\n        // to make an branch \"platform\" (addition ability of \"is\")\n        'platform': dualize(platform),\n        // to make an branch \"support\" (addition ability of \"is\")\n        'support': dualize(support)\n    },\n    // standard 10 types (has a typeof be 10+ data types )\n    types,\n    // helpers\n    helpers,\n    // strict mode detect of data\n    strict\n));\n\n/**\n * @description\n    defination on platforms (both variants on platform like Electron)\n\n    bower install --save s-is\n\n    npm install --save s-is\n\n * @example window.is                   // in browser\n * @example var is = require('s-is')    // in Node.js\n * @exports s-is\n * @public\n */\nif ( is.platform.node() ) module.exports = is;\nif ( is.platform.browser() ) window['is'] = is;\n\n})() "],"names":["ts","Object","prototype","toString","types","typeof","data","key","nan","infinity","is","number","null","string","boolean","function","array","call","object","undefined","defined","strict","_object","_number","class","test","_equal","first","second","st","k1","keys","k2","length","JSON","stringify","e","indexOf","_objEqual","helpers","equal","objEqual","empty","notSafe","prop","hasOwnProperty","Error","toUpperCase","finite","countable","symbol","date","error","regexp","argument","promise","support","Symbol","Promise","Function","extend","field","result","arguments","dualize","checks","bind","check","toLowerCase","this","apply","Array","slice","platform","node","process","browser","window","module","exports"],"mappings":"CAKA,wBAEA,IAAIA,EAAKC,OAAOC,UAAUC,SAItBC,EAAQ,CAaRC,OAAU,SAAWC,GACjB,IAAM,IAAIC,KAAOH,EAAQ,GAAY,UAAPG,GAAmBH,EAAMG,GAAMD,GAAS,MAEtE,MAAY,WAAPC,SAAiCD,EAC1BC,GAahBC,IAAO,SAAWF,GAAS,OAAOA,GAASA,GAY3CG,SAAY,SAAWH,GAAS,OAAOI,EAAGC,OAAQL,IAAUA,GAAQA,EAAK,GAYzEM,KAAQ,SAAWN,GAAS,OAAgB,OAATA,GAenCK,OAAU,SAAWL,GAAS,MAAsB,iBAARA,GAY5CO,OAAU,SAAWP,GAAS,MAAsB,iBAARA,GAY5CQ,QAAW,SAAWR,GAAS,MAAsB,kBAARA,GAW7CS,SAAY,SAAWT,GAAS,MAAsB,mBAARA,GAY9CU,MAAS,SAAWV,GAAS,MAAwB,kBAAjBN,EAAGiB,KAAKX,IAa5CY,OAAU,SAAWZ,GAAS,QAASA,IAASI,EAAGM,MAAOV,IAAyB,iBAARA,GAY3Ea,UAAa,SAAWb,GAAS,YAAsB,IAARA,GAgB/Cc,QAAW,SAAWd,GAAS,YAAsB,IAARA,IAW7Ce,EAAS,CAgBTC,QAAW,SAAWhB,GAAS,MAAwB,mBAAjBN,EAAGiB,KAAKX,IAgB9CiB,QAAW,SAAWjB,GAAS,OAAOI,EAAGC,OAAQL,KAAWI,EAAGF,IAAKF,IAAUA,GAAQA,EAAK,GAe3FkB,MAAS,SAAWlB,GAAS,OAAOI,EAAGK,SAAUT,IAAU,SAASmB,KAAKnB,EAAKH,aAqB9EuB,OAAU,SAAWC,EAAOC,GACxB,OAASlB,EAAGL,OAAOsB,IACf,IAAK,MAAO,OAAOjB,EAAGF,IAAIoB,GAC1B,IAAK,WACL,IAAK,YACL,IAAK,UACL,IAAK,SACL,IAAK,OAAQ,OAAOD,GAASC,EAC7B,IAAK,SAAU,OAAOlB,EAAGC,OAAOiB,IAASD,GAASC,EAClD,IAAK,SAAU,OAAOlB,EAAGG,OAAOe,IAASD,GAASC,EAClD,IAAK,WAAY,OAAOlB,EAAGK,SAASa,IAASD,EAAMxB,YAAcyB,EAAOzB,WACxE,IAAK,QACL,IAAK,SACD,IAAI0B,EAAKnB,EAAGL,OAAOuB,GACnB,OAAQ,SAAJC,GAAiB,UAAJA,IAoBjC,SAAqBF,EAAOC,GACxB,IAAIE,EAAK7B,OAAO8B,KAAKJ,GACjBK,EAAK/B,OAAO8B,KAAKH,GAErB,CAAA,GAAKE,EAAGG,QAAUD,EAAGC,OAAQ,OAAO,EAEhC,IAAM,GAAIC,KAAKC,UAAUR,IAAUO,KAAKC,UAAUP,GAAU,OAAO,EACjE,MAAOQ,GAAK,OAAO,EACrB,IAAM,IAAI7B,EAAM,EAAGA,EAAMuB,EAAGG,OAAQ1B,IAChC,IAA6B,GAAxByB,EAAGK,QAAQP,EAAGvB,MAAgBc,EAAOK,OAAOC,EAAMG,EAAGvB,IAAOqB,EAAOE,EAAGvB,KAAS,OAAO,EAGnG,OAAO,EA/BgB+B,CAAWX,EAAOC,GAIrC,OAAO,IAkCf,IAAIW,EAAU,CAsBVC,MAAS,SAAWb,EAAOC,GACvB,OAASlB,EAAGL,OAAOsB,IACf,IAAK,MAAO,OAAOjB,EAAGF,IAAIoB,GAC1B,IAAK,WACL,IAAK,YACL,IAAK,UACL,IAAK,OAAQ,OAAOD,GAASC,EAC7B,IAAK,WAAY,OAAOlB,EAAGK,SAASa,GACpC,IAAK,SACL,IAAK,SACL,IAAK,SAED,MAAQ,SADJC,EAAKnB,EAAGL,OAAOuB,KACC,aAAJC,GACLF,EAAMxB,YAAcyB,EAAOzB,WAE1C,IAAK,QACL,IAAK,SACD,IAAI0B,EACJ,OAAQ,UADJA,EAAKnB,EAAGL,OAAOuB,KACE,UAAJC,IAgKjC,SAAoBF,EAAOC,GACvB,IAAIE,EAAK7B,OAAO8B,KAAKJ,GACjBK,EAAK/B,OAAO8B,KAAKH,GAErB,CAAA,GAAKE,EAAGG,QAAUD,EAAGC,OAAS,OAAO,EAEjC,IAAMC,KAAKC,UAAUR,IAAQO,KAAKC,UAAUP,GAC1C,MAAOQ,GAAK,OAAO,EACrB,IAAM,IAAI7B,EAAM,EAAGA,EAAMuB,EAAGG,OAAQ1B,IAChC,IAA6B,GAAxByB,EAAGK,QAAQP,EAAGvB,MAAgBgC,EAAQC,MAAMb,EAAMG,EAAGvB,IAAOqB,EAAOE,EAAGvB,KAAS,OAAO,EAGnG,OAAO,EA3KgBkC,CAASd,EAAOC,GAInC,OAAO,GAoBXc,MAAS,SAAWpC,EAAMqC,GAEtB,GAAKrC,IAAsB,iBAARA,GAAkBI,EAAGG,OAAOP,IAAOI,EAAGK,SAAST,IAAU,CACxE,IAAM,IAAIsC,KAAQtC,EACd,GAAKL,OAAOC,UAAU2C,eAAe5B,KAAKX,EAAMsC,GAAQ,OAAO,EACnE,OAAO,EAEJ,GAAKD,EAAU,MAAM,IAAIG,MAAM,kBAAkBpC,EAAGL,OAAOC,GAAMyC,cAAc,iCAEjF,OAAO,GAiBhBC,OAAU,SAAW1C,GAAS,OAAOI,EAAGa,QAAQjB,IAkBhD2C,UAAa,SAAW3C,GACpB,OAAQI,EAAGwC,OAAQ5C,KAAWI,EAAGD,SAAUH,KAAWI,EAAGM,MAAOV,KAAUA,GAAUA,GAexF6C,KAAQ,SAAW7C,GAAS,MAAwB,iBAAjBN,EAAGiB,KAAKX,IAW3C8C,MAAS,SAAW9C,GAAS,MAAwB,kBAAjBN,EAAGiB,KAAKX,IAY5C+C,OAAU,SAAW/C,GAAS,MAAwB,mBAAjBN,EAAGiB,KAAKX,IAc7CgD,SAAY,SAAWhD,GAAS,MAAwB,sBAAjBN,EAAGiB,KAAKX,IAW/C4C,OAAU,SAAW5C,GAAS,MAAwB,mBAAjBN,EAAGiB,KAAKX,IAa7CiD,QAAW,SAAWjD,GAAS,MAAwB,oBAAjBN,EAAGiB,KAAKX,MAAgCA,GAAQI,EAAGK,SAAST,EAAW,QAkCjH,IA0HII,EA1HA8C,EAAU,CAWVN,OAAU,WAAc,MAAwB,mBAAVO,QAAwB/C,EAAGwC,OAAOO,WAWxEF,QAAW,WAAc,MAAyB,mBAAXG,SAAyBhD,EAAG6C,QAAQ,IAAIG,QAAQ,IAAIC,aAgD/F,SAASC,EAAT,GAEI,IADA,IAAoCC,EAAhCC,EADR,EAC+BvD,EAAM,EACzBA,EAAMwD,UAAU9B,OAAQ1B,IAC5B,IAAMsD,KAASE,UAAUxD,GACrBuD,EAAOD,GAASE,UAAUxD,GAAKsD,GAGvC,OAAOC,EAeX,SAASE,EAAUC,GACf,OAAOL,EAAOlD,EAAGwD,KAAKD,GAASA,GAiBnC,SAASvD,EAAKyD,GACV,GACgC,mBAArBA,EAAMC,cACTD,EAAQA,EAAMC,gBACO,mBAAfC,KAAKF,GACjB,OAAOE,KAAKF,GAAOG,MAAM,KAAMC,MAAMrE,UAAUsE,MAAMvD,KAAK8C,UAAW,IAClE,MAAM,IAAIjB,MAAM,qBAAqBqB,EAAM,MAMhDzD,EAAKsD,EAAQJ,EACb,CAEIa,SAAYT,EA5FL,CAWXU,KAAQ,WAAc,MAAyB,oBAAXC,SAA8C,oBAApB3E,EAAGiB,KAAK0D,UAWtEC,QAAW,WAAc,MAAwB,oBAAVC,QAA4C,mBAAnB7E,EAAGiB,KAAK4D,WAwEpErB,QAAWQ,EAAQR,IAGvBpD,EAEAmC,EAEAlB,KAgBIoD,SAASC,SAASI,OAAOC,QAAUrE,GACtCA,EAAG+D,SAASG,YAAYC,OAAW,GAAInE,GA1pB5C"}